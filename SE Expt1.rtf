{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\ul\b\f0\fs22\lang9 Name \b0\fs24 : Shital Rajendra Khulape\par
\b\fs22 PRN\b0  : 2262701242127\par
\ulnone\b Batch \ul\b0 : TY B3\par

\pard\sa200\sl276\slmult1\qc\b\fs28  \fs32 Experiment No : 1\par
\b0\fs22\par
\par

\pard\sa200\sl276\slmult1\fs28 Title of Experiment\fs24 :    To perform the System Analysis requirements Analysis SRS (functional and non functional) of ATM System/ Any other System which you preferred.\par
\fs22  \fs28 Objectives : \fs24 To perform the System Analysis : Reqiurement Analysis, functioal and Non functional.\par
\fs22  \fs28 Theory:\par
\fs22  \fs24 1. Software Requirement:\par
\ulnone A condition or capability needed by a user to solve a problem or achieve an objective\par
A condition or capability that must be met or possessed by a system or system component to satisfy a contract, standard, specification or other formally imposed documents\par
A software requirement is a specification of what a software application should do and the constraints under which it must operate. In essence, it describes the functionalities, performance, and constraints that a software system must meet to satisfy user needs and expectations. \par
Software requirements are the specifications of what a software system should do, how it should behave, and what constraints it should satisfy. They are essential for communicating the expectations and needs of the stakeholders, as well as for guiding the design, development, testing, and maintenance of the software. However, defining software requirements is not a trivial task, as it involves various challenges and trade-offs. In this article, we will discuss some of the key steps and best practices for defining software requirements in a software development project.\par
\ul  2. Software Requirement Specification\par
\ulnone\tab Software Requirement Specification (SRS) Format as the name suggests, is a complete specification and description of requirements of the software that need to be fulfilled for the successful development of the software system. These requirements can be functional as well as non-functional depending upon the type of requirement. The interaction between different customers and contractors is done because it is necessary to fully understand the needs of customers.\par
Depending upon information gathered after interaction, SRS is developed which describes requirements of software that may include changes and modifications that is needed to be done to increase quality of product and to satisfy customer\rquote s demand.\par
1. Introduction\par
Purpose: Describes the purpose of the SRS and its intended audience.\par
Scope: Outlines the boundaries of the software, including what will and won\rquote t be included.\par
Definitions, Acronyms, and Abbreviations: Provides explanations of terms and abbreviations used in the document.\par
References: Lists any documents or resources that were referenced in the preparation of the SRS.\par
Overview: Gives a brief summary of the document\rquote s structure and content.\par
2. Overall Description\par
Product Perspective: Describes the context and origin of the software, including how it fits into the larger system or business process.\par
Product Functions: Provides a high-level overview of the main functionalities of the software.\par
User Classes and Characteristics: Identifies the different types of users and their needs.\par
Operating Environment: Specifies the hardware, software, and network environments where the software will operate.\par
Design and Implementation Constraints: Lists any limitations or constraints that impact the design and development of the software.\par
Assumptions and Dependencies: Outlines assumptions made during the requirements gathering and any dependencies on other systems or technologies.\par
3. Specific Requirements\par
Functional Requirements: Detailed descriptions of the specific behaviors and functions of the software. This section often includes:\par
Use Cases: Scenarios describing interactions between users and the system.\par
Data Requirements: Details on data inputs, outputs, and storage.\par
Interface Requirements: Specifications for how the software will interact with other systems, hardware, or user interfaces.\par
Non-Functional Requirements: Specifications of quality attributes such as:\par
Performance Requirements: Speed, response time, and throughput.\par
Security Requirements: Authentication, authorization, and data protection measures.\par
Usability Requirements: User interface design and ease of use.\par
Reliability Requirements: System availability, fault tolerance, and recovery.\par
Maintainability Requirements: Ease of updating and modifying the software.\par
Portability Requirements: The ability of the software to run in different environments or platforms.\par
External Interface Requirements: Defines how the software will interact with external systems, including hardware interfaces, software interfaces, and communication interfaces.\par
4. System Features\par
Describes the major features of the system in detail, often broken down by functional areas or modules.\par
5. Other Requirements\par
Legal and Regulatory Requirements: Compliance with laws, regulations, or standards that apply to the software.\par
Safety Requirements: Measures to ensure the safety of users and the environment.\par
Performance Metrics: Specific criteria for measuring the software\rquote s performance.\par
6. Appendices\par
Glossary: Definitions of terms used in the document.\par
Additional Information: Any extra material that supports the understanding of the requirements, such as diagrams or detailed explanations.\par
The SRS document is a living document that may evolve as the project progresses and new requirements emerge. It plays a vital role in guiding development, testing, and validation to ensure that the final software product meets the agreed-upon needs and expectations.\par
\ul  3. Functional Requirement (Description):\par
\ulnone These are the requirements that the end user specifically demands as basic facilities that the system should offer. All these functionalities need to be necessarily incorporated into the system as a part of the contract.\par
These are represented or stated in the form of input to be given to the system, the operation performed and the output expected. They are the requirements stated by the user which one can see directly in the final product, unlike the non-functional requirements.\par
It specify what a software system must do to fulfill the needs of its users and other systems it interacts with. They define the specific behaviors, functions, and processes the software must perform, including how it should handle data, user interactions, and integration with other systems. For example, a functional requirement for an e-commerce application might detail that the system should allow users to browse products, add items to a shopping cart, and proceed to checkout with a payment process.\par
These requirements are crucial for guiding the design and development of the software, ensuring that it meets user needs and business goals. They include detailed descriptions of system functionalities, such as user authentication, search capabilities, and order processing, along with any associated business rules and data handling procedures. By clearly outlining what the system should do, functional requirements help ensure that the final product is functional, efficient, and aligned with stakeholder expectations.\par
\ul  4. Non-Functional Requirement (Description):\par
\ulnone It specify the quality attributes, constraints, and conditions under which a software system must operate. Unlike functional requirements, which focus on what the system should do, non-functional requirements address how well the system performs its functions and under what conditions. They are essential for defining the overall quality and user experience of the software.\par
These requirements cover various aspects, including performance, security, usability, and reliability. For example, a non-functional requirement might stipulate that the software must handle up to 500 concurrent users with a response time of less than 2 seconds per transaction. It may also specify that the system must comply with industry-standard security protocols to protect user data, or that the user interface must be intuitive and accessible to users with disabilities. Non-functional requirements help ensure that the software not only meets functional needs but also performs efficiently, securely, and reliably in real-world conditions.\par
These are the quality constraints that the system must satisfy according to the project contract. The priority or extent to which these factors are implemented varies from one project to another. They are also called non-behavioral requirements.\ul\par
\fs28 Experimentation:\fs24\par
 i) Collect and list Functional Requirements Google Pay Systems\par

\pard 
{\pntext\f0 1.\tab}{\*\pn\pnlvlbody\pnf0\pnindent0\pnstart1\pndec{\pntxta.}}
\fi-360\li720\sa200\sl276\slmult1\ulnone Seamless mobile payments: The ability to make secure, fast, and convenient digital payments from a mobile device for a wide range of use cases (e.g. merchants, utility bills, peer-to-peer transfers).\par
{\pntext\f0 2.\tab}Wallet management: Allowing users to easily add money, check balances, view transaction history, and manage their Paytm digital wallet.\par
{\pntext\f0 3.\tab}Bill payments: Enabling users to pay for a variety of bills (electricity, water, gas, cable/satellite TV, mobile postpaid, etc.) directly from the Paytm app.\par
{\pntext\f0 4.\tab}Recharges and top-ups: Supporting mobile, DTH, data card, and metro card recharges/top-ups.\par
{\pntext\f0 5.\tab}Money transfers: Enabling seamless peer-to-peer money transfers between Paytm users, as well as bank account to Paytm wallet transfers.\par
{\pntext\f0 6.\tab}Merchant payments: Allowing in-store, online, and in-app payments to merchants through features like QR code scanning, one-click checkout, etc.\par

\pard\sa200\sl276\slmult1\ul   ii) Collect and list Non- Functional Requirements for Google Pay Systems\par

\pard 
{\pntext\f0 1.\tab}{\*\pn\pnlvlbody\pnf0\pnindent0\pnstart1\pndec{\pntxta.}}
\fi-360\li720\sa200\sl276\slmult1\ulnone Security and privacy: Ensuring robust security measures to protect user data and transactions, as well as compliance with regulations.\par
{\pntext\f0 2.\tab}Scalability: The ability to handle growing user base and transaction volumes without compromising performance.\par
{\pntext\f0 3.\tab}Reliability and availability: Maintaining high uptime and consistent service quality even during peak usage periods.\par
{\pntext\f0 4.\tab}User experience: Providing an intuitive, responsive, and visually appealing interface across mobile and web platforms.\par
{\pntext\f0 5.\tab}Regulatory compliance: Adhering to all relevant financial, data protection, and other applicable laws and regulations.\par
{\pntext\f0 6.\tab}Seamless integrations: Enabling smooth integration with various banks, merchants, and other third-party services.\par
{\pntext\f0 7.\tab}Continuous innovation: Regularly updating the platform with new features and improvements to stay competitive in the rapidly evolving digital payments landscape.\ul  \par

\pard\sa200\sl276\slmult1\fs28 Conclusion: \fs24\par
\ulnone The analysis of the Google Pay system\rquote s requirements reveals that the platform must seamlessly facilitate mobile payments, wallet management, bill payments, and money transfers, while also supporting merchant transactions through various methods. Non-functional requirements emphasize the need for robust security, scalability, reliability, and a superior user experience across both mobile and web platforms. Additionally, the system must adhere to regulatory compliance, enable smooth integrations with financial institutions, and continuously innovate to stay competitive. By addressing these comprehensive requirements, Google Pay can ensure effective functionality and a high-quality user experience.\par
\ul\par
}
 